<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BFS on 1 Day 1 Problem</title>
    <link>https://jyukki97.github.io/tags/bfs/</link>
    <description>Recent content in BFS on 1 Day 1 Problem</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <lastBuildDate>Sun, 15 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jyukki97.github.io/tags/bfs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[백준]2644 촌수계산</title>
      <link>https://jyukki97.github.io/blog/2020-03-15-2644/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-03-15-2644/</guid>
      <description>https://www.acmicpc.net/problem/2644
풀이: [C++]다익스트라 알고리즘(Dijkstra Algorithm) 참고
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;int n, k, e, q, w, m, d[102], b[102];int main() {cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k &amp;gt;&amp;gt; e &amp;gt;&amp;gt; m;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; a(n + 1);priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; p;while(m--) {cin &amp;gt;&amp;gt; q &amp;gt;&amp;gt; w;a[q].push_back(w), a[w].push_back(q);}fill(d, d + n + 1, 101);d[k] = 0;p.push({ 0, k });while (!</description>
    </item>
    
    <item>
      <title>[백준]2583 영역 구하기</title>
      <link>https://jyukki97.github.io/blog/2020-03-14-2583/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-03-14-2583/</guid>
      <description>https://www.acmicpc.net/problem/2583
풀이: 직사각형이 들어있는 곳을 1,
없는곳을 0으로 해놓은 배열을 만든다.
배열을 순회하며, 현재 값이 0 이라면, 영역의 개수를 +1 해주고,
연결된 모든 영역을 순회하여 1로 바꿔주고, 영역의 넓이를 배열에 저장한다.
배열의 모든 숫자가 1이라면,
영역의 개수를 출력하고,
각 영역의 넓이를 오름차순으로 출력한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;int n, m, k, i, t, a[102][102], x1, x2, yl, y2, s = 0, b[5002];void A(int x, int y) {a[x][y] = 1, b[s - 1]++;if (x &amp;gt; 0 &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>[백준]2468 안전 영역</title>
      <link>https://jyukki97.github.io/blog/2020-03-13-2468/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-03-13-2468/</guid>
      <description>https://www.acmicpc.net/problem/2468
풀이: 물의 높이가 h 일 때,
지역의 높이가 h보다 작거나 같다면 잠겨있는 지역이라고 한다.
모든 지역을 순회하며,
현재 지역이 잠겨있지 않다면, 방문 표시를 해두고,
왼쪽, 오른쪽, 위, 아래 에 잠겨있지 않은 곳을 순회하며 방문표시를 한다.
연결된 모든 곳을 방문했다면, 안전한 영역을 +1 해준다.
물의 높이를 0 ~ (지역 중 최대 높이) 까지 순회한 후
안전한 영역의 최대치를 출력한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#define F(i,n)for(int i=0;i&amp;lt;n;i++)using namespace std;int n, m = 0, a[102][102], b[102][102], s, r = 0;void A(int x, int y) {b[x][y] = 0;if (x &amp;gt; 0 &amp;amp;&amp;amp; b[x - 1][y])	A(x - 1, y);if (y &amp;gt; 0 &amp;amp;&amp;amp; b[x][y - 1])	A(x, y - 1);if (x + 1 &amp;lt; n &amp;amp;&amp;amp; b[x + 1][y])	A(x + 1, y);if (y + 1 &amp;lt; n &amp;amp;&amp;amp; b[x][y + 1])	A(x, y + 1);}int main() {cin &amp;gt;&amp;gt; n;F(i,n)F(t,n){cin &amp;gt;&amp;gt; a[i][t];m = m &amp;lt; a[i][t] ?</description>
    </item>
    
    <item>
      <title>[백준]11724 연결 요소의 개수</title>
      <link>https://jyukki97.github.io/blog/2020-03-12-11724/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-03-12-11724/</guid>
      <description>https://www.acmicpc.net/problem/11724
풀이: 방문하지 않은 정점과 연결된 모든 정점을 방문표시하고, 요소의 개수를 +1 해준다.
더이상 방문할 정점이 없을때까지 반복한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std;int n, m, i, t, c = 0, b[1002];vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; a;void T(int x) {if (b[x]) return;b[x] = 1;for (int o : a[x])	T(o);}int main() {cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;a.resize(n + 1);while (m--) {cin &amp;gt;&amp;gt; i &amp;gt;&amp;gt; t;a[i].</description>
    </item>
    
    <item>
      <title>[백준]1697 숨바꼭질</title>
      <link>https://jyukki97.github.io/blog/2020-02-29-1697/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-29-1697/</guid>
      <description>https://www.acmicpc.net/problem/1697
풀이: 현재 위치를 x라고 할 때, x + 1, x - 1, x * 2 위치를 BFS 를 통해 하나씩 찾아간다.
동생의 위치와 같아진다면 몇번 이동했는지 출력한다.
x + 1 은 동생의 위치보다 커질 필요가없으므로 동생의 위치보다 작을때만 이동한다. x * 2 는 동생의 위치 + 1 보다 크다면 (x - 2) * 2 를 하는 것이 이득이므로 제외한다. 현재 위치는 0보다 작아질 수 없으므로 제외한다. 이미 한번 방문한 위치는 다시 방문할 필요없으므로 제외시킨다.</description>
    </item>
    
    <item>
      <title>[백준]2206 벽 부수고 이동하기</title>
      <link>https://jyukki97.github.io/blog/2020-02-29-2206/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-29-2206/</guid>
      <description>https://www.acmicpc.net/problem/2206
풀이: [백준]2178 미로 탐색 참고
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;int n, m, k = -1, q, w, e, dps;vector&amp;lt;string&amp;gt; a;queue&amp;lt;pair&amp;lt;int, pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; dp;bool b[2][1002][1002];int main() {cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;a.resize(n);for (int i = 0; i &amp;lt; n; i++)cin &amp;gt;&amp;gt; a[i];dp.push({ 1, { 0,0 } });for (int i = 1; i &amp;lt; n * m + 1; i++) {dps = dp.</description>
    </item>
    
    <item>
      <title>[백준]7569 토마토</title>
      <link>https://jyukki97.github.io/blog/2020-02-29-7569/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-29-7569/</guid>
      <description>https://www.acmicpc.net/problem/7569
풀이: [백준]7576 토마토 참고
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;int n, m, h, k, q, w, e, a[102][102][102];queue&amp;lt;pair&amp;lt;int, pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt; dp2;int main() {cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n &amp;gt;&amp;gt; h;for (int y = 0; y &amp;lt; h; y++)for (int i = 0; i &amp;lt; n; i++)for (int t = 0; t &amp;lt; m; t++) {cin &amp;gt;&amp;gt; a[y][i][t];if (a[y][i][t] == 1)	dp2.</description>
    </item>
    
    <item>
      <title>[백준]1012 유기농 배추</title>
      <link>https://jyukki97.github.io/blog/2020-02-28-1012/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-28-1012/</guid>
      <description>https://www.acmicpc.net/problem/1012
풀이: [백준]2667 단지번호붙이기 참고
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string.h&amp;gt;using namespace std;int n, T, m, k, q, w, sum, a[52][52];bool b[52][52];void num(int x, int y) {b[x][y] = true;if (x + 1 &amp;lt; n &amp;amp;&amp;amp; a[x + 1][y] &amp;amp;&amp;amp; !b[x + 1][y])num(x + 1, y);if (y + 1 &amp;lt; m &amp;amp;&amp;amp; a[x][y + 1] &amp;amp;&amp;amp; !b[x][y + 1])num(x, y + 1);if (x - 1 &amp;gt;= 0 &amp;amp;&amp;amp; a[x - 1][y] &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>[백준]2178 미로 탐색</title>
      <link>https://jyukki97.github.io/blog/2020-02-28-2178/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-28-2178/</guid>
      <description>https://www.acmicpc.net/problem/2178
풀이: 이동횟수가 i 일때,
이동횟수가 i - 1 인 값들에서 왼쪽, 오른쪽, 위, 아래 중 값이 1이고, 방문한적 없는 곳을 찾아 좌표를 큐에 넣는다.
만약 현재 좌표가 도착위치라면, 이동횟수 i를 출력한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;int n, m, k, q, w;vector&amp;lt;string&amp;gt; a;queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; dp2;bool b[102][102];int main() {cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;a.resize(n);for (int i = 0; i &amp;lt; n; i++)cin &amp;gt;&amp;gt; a[i];dp2.</description>
    </item>
    
    <item>
      <title>[백준]7576 토마토</title>
      <link>https://jyukki97.github.io/blog/2020-02-28-7576/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-28-7576/</guid>
      <description>https://www.acmicpc.net/problem/7576
풀이: [백준]2178 미로 탐색 참고
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;using namespace std;int n, m, k, q, w, a[1002][1002];queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; dp2;int main() {cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n;for (int i = 0; i &amp;lt; n; i++)for (int t = 0; t &amp;lt; m; t++) {cin &amp;gt;&amp;gt; a[i][t];if (a[i][t] == 1)	dp2.push({ i,t });}for (int i = 0;; i++) {queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; dp1;while (!</description>
    </item>
    
    <item>
      <title>[백준]1260 DFS와 BFS</title>
      <link>https://jyukki97.github.io/blog/2020-02-27-1260/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-27-1260/</guid>
      <description>https://www.acmicpc.net/problem/1260
풀이: DFS 와 BFS를 출력한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;string.h&amp;gt;using namespace std;int n, m, v, q, w, a[1002][1002] = {};bool b[1002];void dfs(int x) {b[x] = true;cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#34;&amp;#34;;for (int i = 1; i &amp;lt;= n; i++)if (a[x][i] &amp;amp;&amp;amp; !b[i])	dfs(i);}int main() {cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; v;for (int i = 0; i &amp;lt; m; i++) {cin &amp;gt;&amp;gt; q &amp;gt;&amp;gt; w;a[q][w] = 1;a[w][q] = 1;}dfs(v);cout &amp;lt;&amp;lt; endl;memset(b, 0, n + 1);queue&amp;lt;int&amp;gt; c;c.</description>
    </item>
    
    <item>
      <title>[백준]2667 단지번호붙이기</title>
      <link>https://jyukki97.github.io/blog/2020-02-27-2667/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-27-2667/</guid>
      <description>https://www.acmicpc.net/problem/2667
풀이: 전체를 순회한다.
만약 집이있는 곳 ( 배열에 1인 곳 ) 을 찾았다면, 연결된 모든 단지를 찾아 단지 크기를 배열에 저장한다.
순회가 끝났다면, 배열의 사이즈 (총 단지수) 를 출력한다.
그 후 단지내 집의 수를 오름차순으로 정렬하여 출력하여야하므로
배열을 정렬한 후 배열의 원소를 출력한다.
코드: 사용언어 : c++
#include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;int n;bool b[26][26];vector&amp;lt;string&amp;gt; a;vector&amp;lt;int&amp;gt; c;void num(int x, int y) {b[x][y] = true;c.</description>
    </item>
    
    <item>
      <title>[프로그래머스]단어 변환</title>
      <link>https://jyukki97.github.io/blog/2020-02-17-wordtranslation/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-02-17-wordtranslation/</guid>
      <description>https://programmers.co.kr
문제: 두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.
1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다.2. words에 있는 단어로만 변환할 수 있습니다.예를 들어 begin이 hit, target가 cog, words가 [hot,dot,dog,lot,log,cog]라면 hit -&amp;gt; hot -&amp;gt; dot -&amp;gt; dog -&amp;gt; cog와 같이 4단계를 거쳐 변환할 수 있습니다.
두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    
    <item>
      <title>[프로그래머스]네트워크</title>
      <link>https://jyukki97.github.io/blog/2020-01-03-network/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2020-01-03-network/</guid>
      <description>https://programmers.co.kr
문제: 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.
컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</description>
    </item>
    
    <item>
      <title>[프로그래머스]타겟 넘버</title>
      <link>https://jyukki97.github.io/blog/2019-12-30-targetnum/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2019-12-30-targetnum/</guid>
      <description>https://programmers.co.kr
문제: n개의 음이 아닌 정수가 있습니다. 이 수를 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.
-1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.</description>
    </item>
    
    <item>
      <title>[백준]6603 로또</title>
      <link>https://jyukki97.github.io/blog/2017-12-12-6603/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2017-12-12-6603/</guid>
      <description>https://www.acmicpc.net/problem/6603
풀이:  N 개의 로또 번호 중 6개를 선택하여 로또를 만드는 프로그램 6개의 번호를 사전순으로 하나씩 선택하면서 출력한다. 출력 사이사이에 빈칸을 만들어주고, 하나의 테스트 케이스가 끝나면 빈 줄을 하나 출력한다. 0이 출력되면 끝나므로 while 문 안에 if문으로 제한을 넣어준다.  코드: #include &amp;lt;iostream&amp;gt;using namespace std;int a[13];int main(void) {while (true) {int n;cin &amp;gt;&amp;gt; n;if (n == 0)break;for (int i = 0; i &amp;lt; n; i++) {cin &amp;gt;&amp;gt; a[i];}int b[6] = { 0,1,2,3,4,5 };while (true) {cout &amp;lt;&amp;lt; a[b[0]] &amp;lt;&amp;lt; &amp;#34;&amp;#34; &amp;lt;&amp;lt; a[b[1]] &amp;lt;&amp;lt; &amp;#34;&amp;#34; &amp;lt;&amp;lt; a[b[2]] &amp;lt;&amp;lt; &amp;#34;&amp;#34; &amp;lt;&amp;lt; a[b[3]] &amp;lt;&amp;lt; &amp;#34;&amp;#34; &amp;lt;&amp;lt; a[b[4]] &amp;lt;&amp;lt; &amp;#34;&amp;#34; &amp;lt;&amp;lt; a[b[5]] &amp;lt;&amp;lt; endl;if (b[0] &amp;gt;= n - 6)break;else if (b[1] &amp;gt;= n - 5) {b[0]++;for (int i = 0; i &amp;lt; 5; i++) {b[i + 1] = b[i] + 1;}}else if (b[2] &amp;gt;= n - 4) {b[1]++;for (int i = 1; i &amp;lt; 5; i++) {b[i + 1] = b[i] + 1;}}else if (b[3] &amp;gt;= n - 3) {b[2]++;for (int i = 2; i &amp;lt; 5; i++) {b[i + 1] = b[i] + 1;}}else if (b[4] &amp;gt;= n - 2) {b[3]++;for (int i = 3; i &amp;lt; 5; i++) {b[i + 1] = b[i] + 1;}}else if (b[5] &amp;gt;= n - 1) {b[4]++;b[5] = b[4] + 1;}elseb[5]++;}cout &amp;lt;&amp;lt; endl;}return 0;}</description>
    </item>
    
    <item>
      <title>[백준]2957 이진 탐색 트리</title>
      <link>https://jyukki97.github.io/blog/2017-12-05-2957/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jyukki97.github.io/blog/2017-12-05-2957/</guid>
      <description>https://www.acmicpc.net/problem/2957
풀이:  트리의 루트에서 부터 왼쪽 오른쪽에 삽입할때 마다 높이를 1씩 증가시켜 준다. cin , cout을 사용할 경우 시간초과가 나므로 scanf, printf 를 사용하도록 하자 출력의 사이즈가 int 사이즈를 넘어가므로 long long 을 사용하자  코드: #include &amp;lt;iostream&amp;gt;#include &amp;lt;map&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;stdio.h&amp;gt;using namespace std;int main(void) {int n, num;cin &amp;gt;&amp;gt; n;map&amp;lt;int, long long int&amp;gt; a;a[300001] = -1;a[0] = -1;long long temp = 0;for (int i = 0; i &amp;lt; n; i++) {scanf_s(&amp;#34;%d&amp;#34;, &amp;amp;num);a[num] = max((--a.</description>
    </item>
    
  </channel>
</rss>